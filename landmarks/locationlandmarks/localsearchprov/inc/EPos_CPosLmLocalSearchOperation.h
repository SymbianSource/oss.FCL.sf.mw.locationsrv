/*
* Copyright (c) 2005 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: Operation to search for landmarks or landmark categories from a
*  local database.
*
*/


#ifndef CPOSLMLOCALSEARCHOPERATION_H
#define CPOSLMLOCALSEARCHOPERATION_H

//  INCLUDES
#include <epos_cposlmlocaloperation.h>

// FORWARD DECLARATION
class CPosLmLocalDatabase;
class CPosLmLocalSearch;
class CPosLmLocalSearchHandler;

// CLASS DECLARATION

/**
*  Operation to search for landmarks or landmark categories from a
*  local database.
*/
class CPosLmLocalSearchOperation : public CPosLmLocalOperation
    {

    public:  // Constructors and destructor

        /**
        * Two-phased constructor.
        * @param aDb A database object.
        * @param aLocalSearch A local search class.
        * @param aLocalSearchHandler A local search handler.
        */
        static CPosLmLocalSearchOperation* NewL(
        /* IN */        CPosLmLocalDatabase* aDb,
        /* IN */        CPosLmLocalSearch* aLocalSearch,
        /* IN */        CPosLmLocalSearchHandler* aLocalSearchHandler
        );

        /**
        * Destructor.
        */
        virtual ~CPosLmLocalSearchOperation();

    public: // New functions

        /**
        * This function must be called by the CPosLmLocalSearch class if it is
        * deleted before the search operation has completed.
        */
        void HandleLocalSearchDeleted();

    public: // Functions from base classes

        /**
        * From CPosLmLocalOperation;
        *
        * @param aProgress Will be set to the progress of the operation when
        * the step has finished.
        * @return @p KPosLmOperationNotComplete if the step has completed but
        *   more steps are needed before the operation has finished,
        *   @p KErrNone if the operation has finished successfully.
        */
        TInt NextStepL(
        /* OUT */   TReal32& aProgress
        );

        /**
        * From CPosLmLocalOperation;
        *
        * @param aError An error code generated by NextStepL.
        */
        void HandleError(
        /* IN/OUT */    TInt& aError
        );

        /**
        * From CPosLmLocalOperation;
        */
        void HandleOperationCompleted();

    protected:

    private:

        // By default, prohibit copy constructor
        CPosLmLocalSearchOperation(
            const CPosLmLocalSearchOperation& );
        // Prohibit assigment operator
        CPosLmLocalSearchOperation& operator= (
            const CPosLmLocalSearchOperation& );

        /**
        * C++ default constructor.
        * @param aDb A database object.
        * @param aLocalSearch A local search class.
        * @param aLocalSearchHandler A local search handler.
        */
        CPosLmLocalSearchOperation(
        /* IN */        CPosLmLocalDatabase* aDb,
        /* IN */        CPosLmLocalSearch* aLocalSearch,
        /* IN */        CPosLmLocalSearchHandler* aLocalSearchHandler
        );

        /**
        * Symbian 2nd phase constructor.
        */
        void ConstructL();

     private:

        CPosLmLocalSearch*          iLocalSearch;
        CPosLmLocalSearchHandler*   iLocalSearchHandler;

    };

#endif      // CPOSLMLOCALSEARCHOPERATION_H

// End of File
