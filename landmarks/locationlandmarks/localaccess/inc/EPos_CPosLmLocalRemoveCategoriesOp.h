/*
* Copyright (c) 2005 Nokia Corporation and/or its subsidiary(-ies). 
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description: Operation for removing categories from a database.
*
*
*/



#ifndef CPOSLMLOCALREMOVECATEGORIESOP_H
#define CPOSLMLOCALREMOVECATEGORIESOP_H

//  INCLUDES
#include <EPos_Landmarks.h>
#include "EPos_CPosLmLocalModifyOp.h"

// CONSTANTS

// FORWARD DECLARATIONS

// CLASS DECLARATION

/**
* Operation for removing categories from a database.
*
*  @lib eposlmlocalaccess.lib
*/
NONSHARABLE_CLASS(CPosLmLocalRemoveCategoriesOp) : public CPosLmLocalModifyOp
    {

    public:  // Constructors and destructor

        /**
        * Two-phased constructor.
        * Use this for removing a single category.
        * @param aDb A landmark database.
        * @param aCategoryId The id of the category to remove.
        */
        static CPosLmLocalRemoveCategoriesOp* NewL(
        /* IN */        CPosLmLocalDatabase& aDb,
        /* IN */        TPosLmItemId aCategoryId
        );

        /**
        * Two-phased constructor.
        * Use this to remove a set of categories.
        * @param aDb A landmark database.
        * @param aCategoryIdArray The categories to remove.
        */
        static CPosLmLocalRemoveCategoriesOp* NewL(
        /* IN */        CPosLmLocalDatabase& aDb,
        /* IN */        const RArray<TPosLmItemId>& aCategoryIdArray
        );

        /**
        * Two-phased constructor.
        * Use this to remove a category from a set of landmarks.
        * @param aDb A landmark database.
        * @param aCategoryId The category to remove from the set of landmarks.
        * @param aLandmarkIdArray The set of landmarks to change.
        */
        static CPosLmLocalRemoveCategoriesOp* NewL(
        /* IN */        CPosLmLocalDatabase& aDb,
        /* IN */        TPosLmItemId aCategoryId,
        /* IN */        RArray<TPosLmItemId>& aLandmarkIdArray
        );

        /**
        * Destructor.
        */
        virtual ~CPosLmLocalRemoveCategoriesOp();

    public: // Functions from base classes

        /**
        * From CPosLmLocalModifyOp.
        *
        * @param aProgress The current progress.
        */
        void DoNextStepPreL(
        /* OUT */       TReal32& aProgress
        );

        /**
        * From CPosLmLocalModifyOp.
        *
        * @param aProgress The current progress.
        * @return ETrue if a begin transaction should be made. EFalse otherwise.
        */
        TBool DoNextStepPostL(
        /* OUT */       TReal32& aProgress
        );

        /**
        * From CPosLmLocalModifyOp.
        *
        * @return Current step size.
        */
        TReal32 Step();

        /**
        * From CPosLmLocalModifyOp.
        *
        * @param aResourceId A resource id.
        * @param aNoOfSubOperations A number of sub operations.
        */
        void CheckResourceValue(
        /* IN */    TInt aResourceId,
        /* IN */    TInt aNoOfSubOperations
        );

        /**
        * From CPosLmLocalOperation;
        *
        * @param aError An error code generated by NextStepL.
        */
        void HandleError(
        /* IN/OUT */    TInt& aError
        );

    private:    // Data types

        // Type of remove.
        enum TRemoveType
            {
            ERemoveSingleCategory = 0,
            ERemoveMultipleCategories,
            ERemoveCategoryFromLandmarks
            };

    private:

        /**
        * C++ default constructor.
        * @param aDb A landmark db.
        * @param aRemoveType Type of remove.
        */
        CPosLmLocalRemoveCategoriesOp(
        /* IN */        CPosLmLocalDatabase& aDb,
        /* IN */        TRemoveType aRemoveType
        );

        /**
        * By default Symbian 2nd phase constructor is private.
        * @param aCategoryId The id of the category to remove.
        */
        void ConstructL(
        /* IN */        TPosLmItemId aCategoryId
        );

        /**
        * By default Symbian 2nd phase constructor is private.
        * @param aCategoryIdArray The categories to remove.
        */
        void ConstructL(
        /* IN */        const RArray<TPosLmItemId>& aCategoryIdArray
        );

        /**
        * By default Symbian 2nd phase constructor is private.
        * @param aCategoryId The category to remove from the set of landmarks.
        * @param aLandmarkIdArray The set of landmarks to change.
        */
        void ConstructL(
        /* IN */        TPosLmItemId aCategoryId,
        /* IN */        RArray<TPosLmItemId>& aLandmarkIdArray
        );

        /**
        * Rollback if in transaction and generate an event.
        * @param aProgress Current progress.
        */
        void RollbackAndGenerateEventIfNeeded(
        /* IN */        TReal32 aProgress
        );

        /**
        * Generates an event.
        * @param aProgress Current progress.
        * @return KErrNone if successful. Otherwise any system-wide error code.
        */
        TInt GenerateEventIfNeeded(
        /* IN */        TReal32 aProgress
        );

        // Prohibit copy constructor if not deriving from CBase.
        CPosLmLocalRemoveCategoriesOp(
            const CPosLmLocalRemoveCategoriesOp&);
        // Prohibit assigment operator if not deriving from CBase.
        CPosLmLocalRemoveCategoriesOp& operator=(
            const CPosLmLocalRemoveCategoriesOp&);

    private:    // Data

        // Category id (ERemoveCategoryFromLandmarks)
        TPosLmItemId iCategoryId;

        // Item list with items to remove. Can be either landmarks or categories
        // depending on type of remove.
        RArray<TPosLmItemId> iIdArray;

        // The current landmark handled in the id array.
        TInt iCurrent;

        // Type of remove
        TRemoveType iRemoveType;

    };

#endif      // CPOSLMLOCALREMOVECATEGORIESOP_H

// End of File
