/*
* Copyright (c) 2005 Nokia Corporation and/or its subsidiary(-ies).
* All rights reserved.
* This component and the accompanying materials are made available
* under the terms of "Eclipse Public License v1.0"
* which accompanies this distribution, and is available
* at the URL "http://www.eclipse.org/legal/epl-v10.html".
*
* Initial Contributors:
* Nokia Corporation - initial contribution.
*
* Contributors:
*
* Description:  Contains definations of all the constants used by 
				LBT Server core
*
*/


#ifndef _LBT_SERVERCONSTS_H
#define _LBT_SERVERCONSTS_H

#include "lbttriggerentry.h"
#include <lbtcommon.h>

_LIT(KLbtServerCoreName, "LBTServerCore");

/** 
 * Message Parameters index in a 
 * message of RMessage2
 * 
 */

/**
 * Message Parameters index in a message of 
 * RMessage2. The client library has to use
 * the parameter index defined below to write 
 * data into the IPC message.
 *
 */

// This position in the IPC is used by the server to write back trigger id(s)
const TInt KParamTriggerId = 0;

// This position in the IPC messsage should be used by the client library for any trigger
// information that is to be written by the server in responce to a service request
const TInt KParamTriggerEntry = 1;

// This position in the IPC message is used for any object of list options 
const TInt KParamFilter = 2;

// This position in the IPC message is used by the server to write fire info objects
const TInt KParamTriggerFireInfo = 2;

// This position in the IPC message should hold the sub-session handle
const TInt KParamSubsessionHandle = 3;

// This position in the IPC message should hold the type of the trigger. i.e.
// Session ot start up trigger
const TInt KParamTriggerType = 2;

// This position in the IPC message should hold the fire on update. 
const TInt KParamFireOnUpdate = 2;

// This position in the IPC message will hold the number of triggers 
// generated by a client library list operation on the trigger DB
const TInt KTriggersSize = 0;

// This position in the IPC message should hold the attribute mask for any required operation
const TInt KParamMask = 0;

// This position in the IPC message should hold the state of the trigger
const TInt KTriggerState = 1;

// This position in the IPC message should hold the type of the filter sent
const TInt KParamFilterType = 0;

// This position in the IPC message should be used for triggering settings
const TInt KParamSettings = 1;

// This position in the IPC message should be used for triggering status
const TInt KParamStatus = 0;

// This position in the IPC message should be used for holding change events
const TInt KParamChangeEvent = 0;
// This position in the IPC message should be used for holding struct which 
// holds fire on creation and trigger type information.
const TInt KParamTriggerCreationInfo= 2;

// This position in the IPC message should be used for holding struct which 
// holds fire on activation and trigger type information.
const TInt KParamTriggerUpdationInfo= 2;

// This position in the IPC message should be used for holding struct which 
// holds fire on activation and trigger state information.
const TInt KParamTriggerStateInfo= 1;

// Interface UID for Server Logic ECOM DLL Interface.
const TUid KServerLogicInterfaceUid = {0x1028312D};

/**
 * Current server version number
 *
 */
const TInt8 KLbtMajorVersionNumber = 1;
const TInt8 KLbtMinorVersionNumber = 0;
const TInt16 KLbtBuildVersionNumber = 0;

/**
 * Service Ids for client service requests. These
 * service numbers should be used by the client library 
 * in all IPC messages to indicate the type of service
 * required
 *
 */
enum TLbtServiceIds
	{
	/* Subsession Open */
	ELbtSubSessionOpen,
	/* Subsession open id for management library */
	ELbtMgmtSubSessionOpen,
	/* Subsession Close */
	ELbtSubSessionClose,
	/* Creatioin of a Trigger */
	ELbtCreateTrigger,
	/* Deletion of a Trigger */
	ELbtDeleteTrigger,
	/* Delettion of multiple Triggers */
	ELbtDeleteTriggers,
	/* Retreive trigger */
	ELbtGetTrigger,
	/* Get the size required for any listing operation */
	ELbtGetListTriggerIdsSize,
	/* List Triggers */
	ELbtListTriggerIds,
	/* Get Triggers Buffer Size*/
	ELbtGetTriggersBufferSize,
	/* Get Triggers */
	ELbtGetTriggers,
	/* Gets the number of triggers fired for a client */
	EGetFiredTriggersCount,
	/* Get fired triggers */
	ELbtGetFiredTriggers,
	/* Update Trigger */
	ELbtUpdateTrigger,
	/* Set trigger state */
	ELbtSetTriggerState,
	/* Set the state of multiple Triggers */
	ELbtSetTriggersState,		
	/* Create and retreive Trigger iterator */
	ELbtGetTriggerIterator,	
	
	/**
	 * All new Notification service ids should be added between
	 * ELbtNotifyTriggerFired and ELbtNotifyTriggeringSysSettingChange
	 * Donnot add in any other place
	 */
	
	/* Notification for session Trigger fire event */
	ELbtNotifyTriggerFired,
	/* Cancel create trigger operation*/
	ELbtCancelCreateTrigger,
	/* Cancel delete triggers operation*/
	ELbtCancelDeleteTriggers,
	/* Cancel delete triggers operation*/
	ELbtCancelUpdateTrigger,
	/* Cancel set triggers state operation*/
	ELbtCancelSetTriggersState,
	/* Cancel list trigger ids operation*/
	ELbtCancelListTriggerIds,
	/* Cancel get triggers operation*/
	ELbtCancelGetTriggers,
	/* Cancels all the pending operation*/
	ELbtCancelAll,
	/* Notification for Trigger change event notification*/
	ELbtNotifyTriggerChangeEvent,
	/* Notification for nearest trigger change */
	ELbtNotifyNearestTriggerChange,	
	/* Notification of triggering system status change event */
	ELbtNotifyTriggeringSysStatusChange,
	/* Notification of triggering system settings change event */
	ELbtNotifyTriggeringSysSettingChange,
	/**
	 * Donot add any notification service ids after this
	 * Add before ELbtNotifyTriggeringSysSettingChange
	 * 
	 */	
	/* Cancelation of trigger change event notification */
	ELbtCnclNotifyTriggerChangeEvent,
	/* Cancelation of triggering system status change event */
	ELbtCnclNotifyTriggeringSysStatusChange,	
	/* Cancelation of triggering system settings change event */
	ELbtCnclNotifyTriggeringSysSettingChange,	
	/* Cancelation of session trigger fire event notification */
	ELbtCnclNotifyTriggerFired,
	/* Cancelation of nearest trigger change notification */
	ELbtCnclNotifyNearestTriggerChange,	
	 	 
	/* Getnearest trigger */
	ELbtGetNearestTrigger,		
	/* Get trigger system settings */
	ELbtGetTriggeringSysSetting,
	/* Set triggering system settings */
	ELbtSetTriggeringSettings,
	/* Get triggering system status */
	ELbtGetTriggeringSysStatus
	};

/**
 * This structure packs fire on creation flag and trigger type
 */
 struct TLbtTriggerCreationInfo
 	{
 	TBool iFireOnCreation;
 	CLbtTriggerEntry::TType iTriggerType;
 	};
 
 /**
  * This structure packs fire on activation flag and trigger type
  */
  struct TLbtTriggerUpdationInfo
     {
     TLbtFireOnUpdate iFireOnUpdate;
     CLbtTriggerEntry::TType iTriggerType;
     };
  
 /**
  * This structure packs fire on activation flag and trigger state
  */
  struct TLbtTriggerStateInfo
     {
     TLbtFireOnUpdate iFireOnUpdate;
     CLbtTriggerEntry::TLbtTriggerState iState;
     };
  
  
/**
 * Error code that is used internally to reflect partial completion
 */
  const TInt KLbtErrPartial = -40000;
#endif //_LBT_SERVERCONSTS_H

